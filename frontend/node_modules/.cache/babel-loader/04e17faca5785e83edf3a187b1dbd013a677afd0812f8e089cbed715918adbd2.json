{"ast":null,"code":"// Enhanced address service with real German data\n\n// Use OpenStreetMap Nominatim API (free, comprehensive)\nconst NOMINATIM_BASE = 'https://nominatim.openstreetmap.org/search';\nexport const searchGermanAddresses = async (query, type = 'city') => {\n  if (!query || query.length < 2) return [];\n  try {\n    let searchQuery = '';\n    if (type === 'postal') {\n      // Search by postal code\n      searchQuery = `${query}, Germany`;\n    } else if (type === 'city') {\n      // Search by city name\n      searchQuery = `${query}, Germany`;\n    }\n    const response = await fetch(`${NOMINATIM_BASE}?` + new URLSearchParams({\n      q: searchQuery,\n      format: 'json',\n      countrycodes: 'de',\n      limit: '10',\n      addressdetails: '1'\n    }));\n    const data = await response.json();\n    return data.filter(item => {\n      var _item$address, _item$address2;\n      return ((_item$address = item.address) === null || _item$address === void 0 ? void 0 : _item$address.postcode) && ((_item$address2 = item.address) === null || _item$address2 === void 0 ? void 0 : _item$address2.city);\n    }).map(item => ({\n      postalCode: item.address.postcode,\n      city: item.address.city || item.address.town || item.address.village,\n      state: item.address.state,\n      displayName: item.display_name\n    })).filter((item, index, self) =>\n    // Remove duplicates\n    index === self.findIndex(t => t.postalCode === item.postalCode && t.city === item.city));\n  } catch (error) {\n    console.error('Address search error:', error);\n    return [];\n  }\n};\nexport const searchGermanStreets = async (city, streetQuery) => {\n  if (!streetQuery || streetQuery.length < 3 || !city) return [];\n  try {\n    const response = await fetch(`${NOMINATIM_BASE}?` + new URLSearchParams({\n      q: `${streetQuery}, ${city}, Germany`,\n      format: 'json',\n      countrycodes: 'de',\n      limit: '8',\n      addressdetails: '1'\n    }));\n    const data = await response.json();\n    return data.filter(item => {\n      var _item$address3, _item$address4;\n      return ((_item$address3 = item.address) === null || _item$address3 === void 0 ? void 0 : _item$address3.road) && ((_item$address4 = item.address) === null || _item$address4 === void 0 ? void 0 : _item$address4.postcode);\n    }).map(item => ({\n      street: item.address.road,\n      city: item.address.city || item.address.town,\n      postalCode: item.address.postcode,\n      fullAddress: `${item.address.road}, ${item.address.city || item.address.town} ${item.address.postcode}`\n    }));\n  } catch (error) {\n    console.error('Street search error:', error);\n    return [];\n  }\n};\n\n// Get ALL postal codes for a city\nexport const getAllPostalCodesForCity = async cityName => {\n  try {\n    const response = await fetch(`${NOMINATIM_BASE}?` + new URLSearchParams({\n      q: `${cityName}, Germany`,\n      format: 'json',\n      countrycodes: 'de',\n      limit: '50',\n      // Get more results\n      addressdetails: '1'\n    }));\n    const data = await response.json();\n    const postalCodes = data.filter(item => {\n      var _item$address5;\n      return (_item$address5 = item.address) === null || _item$address5 === void 0 ? void 0 : _item$address5.postcode;\n    }).map(item => ({\n      postalCode: item.address.postcode,\n      city: item.address.city || item.address.town,\n      state: item.address.state,\n      displayName: `${item.address.postcode} - ${item.address.city}`\n    })).filter((item, index, self) => index === self.findIndex(t => t.postalCode === item.postalCode)).sort((a, b) => a.postalCode.localeCompare(b.postalCode));\n    return postalCodes;\n  } catch (error) {\n    console.error('Postal code search error:', error);\n    return [];\n  }\n};\n\n// Expanded fallback data for offline mode\nconst FALLBACK_POSTAL_CODES = [{\n  postalCode: '10115',\n  city: 'Berlin',\n  state: 'Berlin',\n  displayName: '10115 - Berlin'\n}, {\n  postalCode: '20095',\n  city: 'Hamburg',\n  state: 'Hamburg',\n  displayName: '20095 - Hamburg'\n}, {\n  postalCode: '80331',\n  city: 'München',\n  state: 'Bayern',\n  displayName: '80331 - München'\n}, {\n  postalCode: '80333',\n  city: 'München',\n  state: 'Bayern',\n  displayName: '80333 - München'\n}, {\n  postalCode: '80335',\n  city: 'München',\n  state: 'Bayern',\n  displayName: '80335 - München'\n}, {\n  postalCode: '50667',\n  city: 'Köln',\n  state: 'Nordrhein-Westfalen',\n  displayName: '50667 - Köln'\n}, {\n  postalCode: '60311',\n  city: 'Frankfurt am Main',\n  state: 'Hessen',\n  displayName: '60311 - Frankfurt am Main'\n}, {\n  postalCode: '70173',\n  city: 'Stuttgart',\n  state: 'Baden-Württemberg',\n  displayName: '70173 - Stuttgart'\n}, {\n  postalCode: '30159',\n  city: 'Hannover',\n  state: 'Niedersachsen',\n  displayName: '30159 - Hannover'\n}, {\n  postalCode: '90402',\n  city: 'Nürnberg',\n  state: 'Bayern',\n  displayName: '90402 - Nürnberg'\n}, {\n  postalCode: '01067',\n  city: 'Dresden',\n  state: 'Sachsen',\n  displayName: '01067 - Dresden'\n}, {\n  postalCode: '04109',\n  city: 'Leipzig',\n  state: 'Sachsen',\n  displayName: '04109 - Leipzig'\n}, {\n  postalCode: '91054',\n  city: 'Erlangen',\n  state: 'Bayern',\n  displayName: '91054 - Erlangen'\n}, {\n  postalCode: '91052',\n  city: 'Erlangen',\n  state: 'Bayern',\n  displayName: '91052 - Erlangen'\n}];\nexport const searchPostalCodes = async query => {\n  // Try API first, fallback to static data\n  try {\n    if (query.length >= 2) {\n      const apiResults = await searchGermanAddresses(query, /^\\d/.test(query) ? 'postal' : 'city');\n      if (apiResults.length > 0) {\n        return apiResults.slice(0, 8); // Limit to 8 suggestions\n      }\n    }\n\n    // Fallback to local data\n    return FALLBACK_POSTAL_CODES.filter(item => item.postalCode.startsWith(query) || item.city.toLowerCase().includes(query.toLowerCase())).slice(0, 5);\n  } catch (error) {\n    console.error('Postal code search failed, using fallback:', error);\n    return FALLBACK_POSTAL_CODES.filter(item => item.postalCode.startsWith(query) || item.city.toLowerCase().includes(query.toLowerCase())).slice(0, 5);\n  }\n};\nexport const getCityByPostalCode = async postalCode => {\n  try {\n    const results = await searchGermanAddresses(postalCode, 'postal');\n    return results.length > 0 ? results[0].city : null;\n  } catch (error) {\n    // Fallback to local data\n    const fallback = FALLBACK_POSTAL_CODES.find(item => item.postalCode === postalCode);\n    return fallback ? fallback.city : null;\n  }\n};\nexport const getPostalCodeByCity = async city => {\n  try {\n    const results = await searchGermanAddresses(city, 'city');\n    return results.length > 0 ? results[0].postalCode : null;\n  } catch (error) {\n    // Fallback to local data\n    const fallback = FALLBACK_POSTAL_CODES.find(item => item.city.toLowerCase() === city.toLowerCase());\n    return fallback ? fallback.postalCode : null;\n  }\n};","map":{"version":3,"names":["NOMINATIM_BASE","searchGermanAddresses","query","type","length","searchQuery","response","fetch","URLSearchParams","q","format","countrycodes","limit","addressdetails","data","json","filter","item","_item$address","_item$address2","address","postcode","city","map","postalCode","town","village","state","displayName","display_name","index","self","findIndex","t","error","console","searchGermanStreets","streetQuery","_item$address3","_item$address4","road","street","fullAddress","getAllPostalCodesForCity","cityName","postalCodes","_item$address5","sort","a","b","localeCompare","FALLBACK_POSTAL_CODES","searchPostalCodes","apiResults","test","slice","startsWith","toLowerCase","includes","getCityByPostalCode","results","fallback","find","getPostalCodeByCity"],"sources":["C:/Users/sahoo/OneDrive/Desktop/internet-provider-comparison/backend/Check24-Gendev-Challenge-2025/frontend/src/services/addressService.ts"],"sourcesContent":["// Enhanced address service with real German data\r\nexport interface AddressSuggestion {\r\n  postalCode: string;\r\n  city: string;\r\n  state: string;\r\n  displayName: string;\r\n}\r\n\r\nexport interface StreetSuggestion {\r\n  street: string;\r\n  city: string;\r\n  postalCode: string;\r\n  fullAddress: string;\r\n}\r\n\r\n// Use OpenStreetMap Nominatim API (free, comprehensive)\r\nconst NOMINATIM_BASE = 'https://nominatim.openstreetmap.org/search';\r\n\r\nexport const searchGermanAddresses = async (query: string, type: 'city' | 'postal' | 'street' = 'city'): Promise<AddressSuggestion[]> => {\r\n  if (!query || query.length < 2) return [];\r\n  \r\n  try {\r\n    let searchQuery = '';\r\n    \r\n    if (type === 'postal') {\r\n      // Search by postal code\r\n      searchQuery = `${query}, Germany`;\r\n    } else if (type === 'city') {\r\n      // Search by city name\r\n      searchQuery = `${query}, Germany`;\r\n    }\r\n    \r\n    const response = await fetch(\r\n      `${NOMINATIM_BASE}?` + new URLSearchParams({\r\n        q: searchQuery,\r\n        format: 'json',\r\n        countrycodes: 'de',\r\n        limit: '10',\r\n        addressdetails: '1'\r\n      })\r\n    );\r\n    \r\n    const data = await response.json();\r\n    \r\n    return data\r\n      .filter((item: any) => item.address?.postcode && item.address?.city)\r\n      .map((item: any) => ({\r\n        postalCode: item.address.postcode,\r\n        city: item.address.city || item.address.town || item.address.village,\r\n        state: item.address.state,\r\n        displayName: item.display_name\r\n      }))\r\n      .filter((item: AddressSuggestion, index: number, self: AddressSuggestion[]) => \r\n        // Remove duplicates\r\n        index === self.findIndex((t: AddressSuggestion) => t.postalCode === item.postalCode && t.city === item.city)\r\n      );\r\n      \r\n  } catch (error) {\r\n    console.error('Address search error:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const searchGermanStreets = async (city: string, streetQuery: string): Promise<StreetSuggestion[]> => {\r\n  if (!streetQuery || streetQuery.length < 3 || !city) return [];\r\n  \r\n  try {\r\n    const response = await fetch(\r\n      `${NOMINATIM_BASE}?` + new URLSearchParams({\r\n        q: `${streetQuery}, ${city}, Germany`,\r\n        format: 'json',\r\n        countrycodes: 'de',\r\n        limit: '8',\r\n        addressdetails: '1'\r\n      })\r\n    );\r\n    \r\n    const data = await response.json();\r\n    \r\n    return data\r\n      .filter((item: any) => item.address?.road && item.address?.postcode)\r\n      .map((item: any) => ({\r\n        street: item.address.road,\r\n        city: item.address.city || item.address.town,\r\n        postalCode: item.address.postcode,\r\n        fullAddress: `${item.address.road}, ${item.address.city || item.address.town} ${item.address.postcode}`\r\n      }));\r\n      \r\n  } catch (error) {\r\n    console.error('Street search error:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Get ALL postal codes for a city\r\nexport const getAllPostalCodesForCity = async (cityName: string): Promise<AddressSuggestion[]> => {\r\n  try {\r\n    const response = await fetch(\r\n      `${NOMINATIM_BASE}?` + new URLSearchParams({\r\n        q: `${cityName}, Germany`,\r\n        format: 'json',\r\n        countrycodes: 'de',\r\n        limit: '50',  // Get more results\r\n        addressdetails: '1'\r\n      })\r\n    );\r\n    \r\n    const data = await response.json();\r\n    \r\n    const postalCodes = data\r\n      .filter((item: any) => item.address?.postcode)\r\n      .map((item: any) => ({\r\n        postalCode: item.address.postcode,\r\n        city: item.address.city || item.address.town,\r\n        state: item.address.state,\r\n        displayName: `${item.address.postcode} - ${item.address.city}`\r\n      }))\r\n      .filter((item: AddressSuggestion, index: number, self: AddressSuggestion[]) => \r\n        index === self.findIndex((t: AddressSuggestion) => t.postalCode === item.postalCode)\r\n      )\r\n      .sort((a: AddressSuggestion, b: AddressSuggestion) => a.postalCode.localeCompare(b.postalCode));\r\n    \r\n    return postalCodes;\r\n    \r\n  } catch (error) {\r\n    console.error('Postal code search error:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Expanded fallback data for offline mode\r\nconst FALLBACK_POSTAL_CODES: AddressSuggestion[] = [\r\n  { postalCode: '10115', city: 'Berlin', state: 'Berlin', displayName: '10115 - Berlin' },\r\n  { postalCode: '20095', city: 'Hamburg', state: 'Hamburg', displayName: '20095 - Hamburg' },\r\n  { postalCode: '80331', city: 'München', state: 'Bayern', displayName: '80331 - München' },\r\n  { postalCode: '80333', city: 'München', state: 'Bayern', displayName: '80333 - München' },\r\n  { postalCode: '80335', city: 'München', state: 'Bayern', displayName: '80335 - München' },\r\n  { postalCode: '50667', city: 'Köln', state: 'Nordrhein-Westfalen', displayName: '50667 - Köln' },\r\n  { postalCode: '60311', city: 'Frankfurt am Main', state: 'Hessen', displayName: '60311 - Frankfurt am Main' },\r\n  { postalCode: '70173', city: 'Stuttgart', state: 'Baden-Württemberg', displayName: '70173 - Stuttgart' },\r\n  { postalCode: '30159', city: 'Hannover', state: 'Niedersachsen', displayName: '30159 - Hannover' },\r\n  { postalCode: '90402', city: 'Nürnberg', state: 'Bayern', displayName: '90402 - Nürnberg' },\r\n  { postalCode: '01067', city: 'Dresden', state: 'Sachsen', displayName: '01067 - Dresden' },\r\n  { postalCode: '04109', city: 'Leipzig', state: 'Sachsen', displayName: '04109 - Leipzig' },\r\n  { postalCode: '91054', city: 'Erlangen', state: 'Bayern', displayName: '91054 - Erlangen' },\r\n  { postalCode: '91052', city: 'Erlangen', state: 'Bayern', displayName: '91052 - Erlangen' }\r\n];\r\n\r\nexport const searchPostalCodes = async (query: string): Promise<AddressSuggestion[]> => {\r\n  // Try API first, fallback to static data\r\n  try {\r\n    if (query.length >= 2) {\r\n      const apiResults = await searchGermanAddresses(query, /^\\d/.test(query) ? 'postal' : 'city');\r\n      if (apiResults.length > 0) {\r\n        return apiResults.slice(0, 8); // Limit to 8 suggestions\r\n      }\r\n    }\r\n    \r\n    // Fallback to local data\r\n    return FALLBACK_POSTAL_CODES.filter((item: AddressSuggestion) => \r\n      item.postalCode.startsWith(query) || \r\n      item.city.toLowerCase().includes(query.toLowerCase())\r\n    ).slice(0, 5);\r\n    \r\n  } catch (error) {\r\n    console.error('Postal code search failed, using fallback:', error);\r\n    return FALLBACK_POSTAL_CODES.filter((item: AddressSuggestion) => \r\n      item.postalCode.startsWith(query) || \r\n      item.city.toLowerCase().includes(query.toLowerCase())\r\n    ).slice(0, 5);\r\n  }\r\n};\r\n\r\nexport const getCityByPostalCode = async (postalCode: string): Promise<string | null> => {\r\n  try {\r\n    const results = await searchGermanAddresses(postalCode, 'postal');\r\n    return results.length > 0 ? results[0].city : null;\r\n  } catch (error) {\r\n    // Fallback to local data\r\n    const fallback = FALLBACK_POSTAL_CODES.find((item: AddressSuggestion) => item.postalCode === postalCode);\r\n    return fallback ? fallback.city : null;\r\n  }\r\n};\r\n\r\nexport const getPostalCodeByCity = async (city: string): Promise<string | null> => {\r\n  try {\r\n    const results = await searchGermanAddresses(city, 'city');\r\n    return results.length > 0 ? results[0].postalCode : null;\r\n  } catch (error) {\r\n    // Fallback to local data\r\n    const fallback = FALLBACK_POSTAL_CODES.find((item: AddressSuggestion) => \r\n      item.city.toLowerCase() === city.toLowerCase()\r\n    );\r\n    return fallback ? fallback.postalCode : null;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}