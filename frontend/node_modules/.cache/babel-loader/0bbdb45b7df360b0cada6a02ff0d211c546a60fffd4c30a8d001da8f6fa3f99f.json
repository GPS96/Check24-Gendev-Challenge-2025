{"ast":null,"code":"// Enhanced address service with comprehensive German postal code coverage\n// Primary API: OpenPLZ (German postal code specialist)\nconst OPENPLZ_BASE='https://openplzapi.org/de';// Secondary API: Nominatim (fallback)\nconst NOMINATIM_BASE='https://nominatim.openstreetmap.org/search';export const searchGermanAddresses=async function(query){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'city';if(!query||query.length<2)return[];// Try OpenPLZ API first (better for German addresses)\ntry{let openplzUrl='';if(type==='postal'){// Search by postal code\nopenplzUrl=\"\".concat(OPENPLZ_BASE,\"/Localities?postalCode=\").concat(query,\"&page=1&pageSize=10\");}else{// Search by city name  \nopenplzUrl=\"\".concat(OPENPLZ_BASE,\"/Localities?name=\").concat(encodeURIComponent(query),\"&page=1&pageSize=10\");}console.log(\"Searching OpenPLZ for \\\"\".concat(query,\"\\\" (\").concat(type,\"):\"),openplzUrl);const response=await fetch(openplzUrl);const data=await response.json();if(data&&Array.isArray(data)){const results=data.map(item=>{var _item$federalState,_item$federalState2;return{postalCode:item.postalCode,city:item.name,state:((_item$federalState=item.federalState)===null||_item$federalState===void 0?void 0:_item$federalState.name)||'Germany',displayName:\"\".concat(item.postalCode,\" - \").concat(item.name,\", \").concat(((_item$federalState2=item.federalState)===null||_item$federalState2===void 0?void 0:_item$federalState2.name)||'Germany')};});console.log(\"OpenPLZ returned \".concat(results.length,\" results for \\\"\").concat(query,\"\\\"\"));return results;}}catch(error){console.log('OpenPLZ API failed, trying Nominatim fallback:',error);}// Fallback to Nominatim\ntry{let searchQuery=\"\".concat(query,\", Germany\");const response=await fetch(\"\".concat(NOMINATIM_BASE,\"?\")+new URLSearchParams({q:searchQuery,format:'json',countrycodes:'de',limit:'10',addressdetails:'1'}));const data=await response.json();const results=data.filter(item=>{var _item$address,_item$address2;return((_item$address=item.address)===null||_item$address===void 0?void 0:_item$address.postcode)&&((_item$address2=item.address)===null||_item$address2===void 0?void 0:_item$address2.city);}).map(item=>({postalCode:item.address.postcode,city:item.address.city||item.address.town||item.address.village,state:item.address.state,displayName:\"\".concat(item.address.postcode,\" - \").concat(item.address.city||item.address.town)})).filter((item,index,self)=>index===self.findIndex(t=>t.postalCode===item.postalCode&&t.city===item.city));console.log(\"Nominatim returned \".concat(results.length,\" results for \\\"\").concat(query,\"\\\"\"));return results;}catch(error){console.error('Both APIs failed:',error);return[];}};// Enhanced fallback data with München and Nürnberg examples\nconst FALLBACK_POSTAL_CODES=[// München (multiple postal codes)\n{postalCode:'80331',city:'München',state:'Bayern',displayName:'80331 - München, Bayern'},{postalCode:'80333',city:'München',state:'Bayern',displayName:'80333 - München, Bayern'},{postalCode:'80335',city:'München',state:'Bayern',displayName:'80335 - München, Bayern'},{postalCode:'80337',city:'München',state:'Bayern',displayName:'80337 - München, Bayern'},{postalCode:'80469',city:'München',state:'Bayern',displayName:'80469 - München, Bayern'},{postalCode:'80636',city:'München',state:'Bayern',displayName:'80636 - München, Bayern'},{postalCode:'80637',city:'München',state:'Bayern',displayName:'80637 - München, Bayern'},{postalCode:'80638',city:'München',state:'Bayern',displayName:'80638 - München, Bayern'},{postalCode:'81675',city:'München',state:'Bayern',displayName:'81675 - München, Bayern'},{postalCode:'81677',city:'München',state:'Bayern',displayName:'81677 - München, Bayern'},// Nürnberg (multiple postal codes)\n{postalCode:'90402',city:'Nürnberg',state:'Bayern',displayName:'90402 - Nürnberg, Bayern'},{postalCode:'90403',city:'Nürnberg',state:'Bayern',displayName:'90403 - Nürnberg, Bayern'},{postalCode:'90408',city:'Nürnberg',state:'Bayern',displayName:'90408 - Nürnberg, Bayern'},{postalCode:'90409',city:'Nürnberg',state:'Bayern',displayName:'90409 - Nürnberg, Bayern'},{postalCode:'90411',city:'Nürnberg',state:'Bayern',displayName:'90411 - Nürnberg, Bayern'},{postalCode:'90419',city:'Nürnberg',state:'Bayern',displayName:'90419 - Nürnberg, Bayern'},{postalCode:'90425',city:'Nürnberg',state:'Bayern',displayName:'90425 - Nürnberg, Bayern'},{postalCode:'90427',city:'Nürnberg',state:'Bayern',displayName:'90427 - Nürnberg, Bayern'},{postalCode:'90429',city:'Nürnberg',state:'Bayern',displayName:'90429 - Nürnberg, Bayern'},{postalCode:'90431',city:'Nürnberg',state:'Bayern',displayName:'90431 - Nürnberg, Bayern'},// Other major cities\n{postalCode:'10115',city:'Berlin',state:'Berlin',displayName:'10115 - Berlin, Berlin'},{postalCode:'20095',city:'Hamburg',state:'Hamburg',displayName:'20095 - Hamburg, Hamburg'},{postalCode:'50667',city:'Köln',state:'Nordrhein-Westfalen',displayName:'50667 - Köln, NRW'},{postalCode:'60311',city:'Frankfurt am Main',state:'Hessen',displayName:'60311 - Frankfurt am Main, Hessen'},{postalCode:'91054',city:'Erlangen',state:'Bayern',displayName:'91054 - Erlangen, Bayern'}];export const searchPostalCodes=async query=>{console.log(\"Searching postal codes for: \\\"\".concat(query,\"\\\"\"));try{if(query.length>=2){const apiResults=await searchGermanAddresses(query,/^\\d/.test(query)?'postal':'city');if(apiResults.length>0){console.log(\"API success: \".concat(apiResults.length,\" results\"));return apiResults.slice(0,8);}}// Enhanced fallback search\nconst fallbackResults=FALLBACK_POSTAL_CODES.filter(item=>item.postalCode.startsWith(query)||item.city.toLowerCase().includes(query.toLowerCase())).slice(0,8);console.log(\"Using fallback: \".concat(fallbackResults.length,\" results for \\\"\").concat(query,\"\\\"\"));return fallbackResults;}catch(error){console.error('Search failed completely, using fallback:',error);return FALLBACK_POSTAL_CODES.filter(item=>item.postalCode.startsWith(query)||item.city.toLowerCase().includes(query.toLowerCase())).slice(0,5);}};export const getCityByPostalCode=async postalCode=>{try{const results=await searchGermanAddresses(postalCode,'postal');if(results.length>0){return results[0].city;}// Fallback\nconst fallback=FALLBACK_POSTAL_CODES.find(item=>item.postalCode===postalCode);return fallback?fallback.city:null;}catch(error){const fallback=FALLBACK_POSTAL_CODES.find(item=>item.postalCode===postalCode);return fallback?fallback.city:null;}};export const getPostalCodeByCity=async city=>{try{const results=await searchGermanAddresses(city,'city');if(results.length>0){return results[0].postalCode;}// Fallback\nconst fallback=FALLBACK_POSTAL_CODES.find(item=>item.city.toLowerCase()===city.toLowerCase());return fallback?fallback.postalCode:null;}catch(error){const fallback=FALLBACK_POSTAL_CODES.find(item=>item.city.toLowerCase()===city.toLowerCase());return fallback?fallback.postalCode:null;}};","map":{"version":3,"names":["OPENPLZ_BASE","NOMINATIM_BASE","searchGermanAddresses","query","type","arguments","length","undefined","openplzUrl","concat","encodeURIComponent","console","log","response","fetch","data","json","Array","isArray","results","map","item","_item$federalState","_item$federalState2","postalCode","city","name","state","federalState","displayName","error","searchQuery","URLSearchParams","q","format","countrycodes","limit","addressdetails","filter","_item$address","_item$address2","address","postcode","town","village","index","self","findIndex","t","FALLBACK_POSTAL_CODES","searchPostalCodes","apiResults","test","slice","fallbackResults","startsWith","toLowerCase","includes","getCityByPostalCode","fallback","find","getPostalCodeByCity"],"sources":["C:/Users/sahoo/OneDrive/Desktop/internet-provider-comparison/backend/Check24-Gendev-Challenge-2025/frontend/src/services/addressService.ts"],"sourcesContent":["// Enhanced address service with comprehensive German postal code coverage\r\nexport interface AddressSuggestion {\r\n  postalCode: string;\r\n  city: string;\r\n  state: string;\r\n  displayName: string;\r\n}\r\n\r\n// Primary API: OpenPLZ (German postal code specialist)\r\nconst OPENPLZ_BASE = 'https://openplzapi.org/de';\r\n\r\n// Secondary API: Nominatim (fallback)\r\nconst NOMINATIM_BASE = 'https://nominatim.openstreetmap.org/search';\r\n\r\nexport const searchGermanAddresses = async (query: string, type: 'city' | 'postal' = 'city'): Promise<AddressSuggestion[]> => {\r\n  if (!query || query.length < 2) return [];\r\n  \r\n  // Try OpenPLZ API first (better for German addresses)\r\n  try {\r\n    let openplzUrl = '';\r\n    \r\n    if (type === 'postal') {\r\n      // Search by postal code\r\n      openplzUrl = `${OPENPLZ_BASE}/Localities?postalCode=${query}&page=1&pageSize=10`;\r\n    } else {\r\n      // Search by city name  \r\n      openplzUrl = `${OPENPLZ_BASE}/Localities?name=${encodeURIComponent(query)}&page=1&pageSize=10`;\r\n    }\r\n    \r\n    console.log(`Searching OpenPLZ for \"${query}\" (${type}):`, openplzUrl);\r\n    \r\n    const response = await fetch(openplzUrl);\r\n    const data = await response.json();\r\n    \r\n    if (data && Array.isArray(data)) {\r\n      const results = data.map((item: any) => ({\r\n        postalCode: item.postalCode,\r\n        city: item.name,\r\n        state: item.federalState?.name || 'Germany',\r\n        displayName: `${item.postalCode} - ${item.name}, ${item.federalState?.name || 'Germany'}`\r\n      }));\r\n      \r\n      console.log(`OpenPLZ returned ${results.length} results for \"${query}\"`);\r\n      return results;\r\n    }\r\n  } catch (error) {\r\n    console.log('OpenPLZ API failed, trying Nominatim fallback:', error);\r\n  }\r\n\r\n  // Fallback to Nominatim\r\n  try {\r\n    let searchQuery = `${query}, Germany`;\r\n    \r\n    const response = await fetch(\r\n      `${NOMINATIM_BASE}?` + new URLSearchParams({\r\n        q: searchQuery,\r\n        format: 'json',\r\n        countrycodes: 'de',\r\n        limit: '10',\r\n        addressdetails: '1'\r\n      })\r\n    );\r\n    \r\n    const data = await response.json();\r\n    \r\n    const results = data\r\n      .filter((item: any) => item.address?.postcode && item.address?.city)\r\n      .map((item: any) => ({\r\n        postalCode: item.address.postcode,\r\n        city: item.address.city || item.address.town || item.address.village,\r\n        state: item.address.state,\r\n        displayName: `${item.address.postcode} - ${item.address.city || item.address.town}`\r\n      }))\r\n      .filter((item: AddressSuggestion, index: number, self: AddressSuggestion[]) => \r\n        index === self.findIndex((t: AddressSuggestion) => t.postalCode === item.postalCode && t.city === item.city)\r\n      );\r\n    \r\n    console.log(`Nominatim returned ${results.length} results for \"${query}\"`);\r\n    return results;\r\n    \r\n  } catch (error) {\r\n    console.error('Both APIs failed:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Enhanced fallback data with München and Nürnberg examples\r\nconst FALLBACK_POSTAL_CODES: AddressSuggestion[] = [\r\n  // München (multiple postal codes)\r\n  { postalCode: '80331', city: 'München', state: 'Bayern', displayName: '80331 - München, Bayern' },\r\n  { postalCode: '80333', city: 'München', state: 'Bayern', displayName: '80333 - München, Bayern' },\r\n  { postalCode: '80335', city: 'München', state: 'Bayern', displayName: '80335 - München, Bayern' },\r\n  { postalCode: '80337', city: 'München', state: 'Bayern', displayName: '80337 - München, Bayern' },\r\n  { postalCode: '80469', city: 'München', state: 'Bayern', displayName: '80469 - München, Bayern' },\r\n  { postalCode: '80636', city: 'München', state: 'Bayern', displayName: '80636 - München, Bayern' },\r\n  { postalCode: '80637', city: 'München', state: 'Bayern', displayName: '80637 - München, Bayern' },\r\n  { postalCode: '80638', city: 'München', state: 'Bayern', displayName: '80638 - München, Bayern' },\r\n  { postalCode: '81675', city: 'München', state: 'Bayern', displayName: '81675 - München, Bayern' },\r\n  { postalCode: '81677', city: 'München', state: 'Bayern', displayName: '81677 - München, Bayern' },\r\n  \r\n  // Nürnberg (multiple postal codes)\r\n  { postalCode: '90402', city: 'Nürnberg', state: 'Bayern', displayName: '90402 - Nürnberg, Bayern' },\r\n  { postalCode: '90403', city: 'Nürnberg', state: 'Bayern', displayName: '90403 - Nürnberg, Bayern' },\r\n  { postalCode: '90408', city: 'Nürnberg', state: 'Bayern', displayName: '90408 - Nürnberg, Bayern' },\r\n  { postalCode: '90409', city: 'Nürnberg', state: 'Bayern', displayName: '90409 - Nürnberg, Bayern' },\r\n  { postalCode: '90411', city: 'Nürnberg', state: 'Bayern', displayName: '90411 - Nürnberg, Bayern' },\r\n  { postalCode: '90419', city: 'Nürnberg', state: 'Bayern', displayName: '90419 - Nürnberg, Bayern' },\r\n  { postalCode: '90425', city: 'Nürnberg', state: 'Bayern', displayName: '90425 - Nürnberg, Bayern' },\r\n  { postalCode: '90427', city: 'Nürnberg', state: 'Bayern', displayName: '90427 - Nürnberg, Bayern' },\r\n  { postalCode: '90429', city: 'Nürnberg', state: 'Bayern', displayName: '90429 - Nürnberg, Bayern' },\r\n  { postalCode: '90431', city: 'Nürnberg', state: 'Bayern', displayName: '90431 - Nürnberg, Bayern' },\r\n  \r\n  // Other major cities\r\n  { postalCode: '10115', city: 'Berlin', state: 'Berlin', displayName: '10115 - Berlin, Berlin' },\r\n  { postalCode: '20095', city: 'Hamburg', state: 'Hamburg', displayName: '20095 - Hamburg, Hamburg' },\r\n  { postalCode: '50667', city: 'Köln', state: 'Nordrhein-Westfalen', displayName: '50667 - Köln, NRW' },\r\n  { postalCode: '60311', city: 'Frankfurt am Main', state: 'Hessen', displayName: '60311 - Frankfurt am Main, Hessen' },\r\n  { postalCode: '91054', city: 'Erlangen', state: 'Bayern', displayName: '91054 - Erlangen, Bayern' }\r\n];\r\n\r\nexport const searchPostalCodes = async (query: string): Promise<AddressSuggestion[]> => {\r\n  console.log(`Searching postal codes for: \"${query}\"`);\r\n  \r\n  try {\r\n    if (query.length >= 2) {\r\n      const apiResults = await searchGermanAddresses(query, /^\\d/.test(query) ? 'postal' : 'city');\r\n      if (apiResults.length > 0) {\r\n        console.log(`API success: ${apiResults.length} results`);\r\n        return apiResults.slice(0, 8);\r\n      }\r\n    }\r\n    \r\n    // Enhanced fallback search\r\n    const fallbackResults = FALLBACK_POSTAL_CODES.filter((item: AddressSuggestion) => \r\n      item.postalCode.startsWith(query) || \r\n      item.city.toLowerCase().includes(query.toLowerCase())\r\n    ).slice(0, 8);\r\n    \r\n    console.log(`Using fallback: ${fallbackResults.length} results for \"${query}\"`);\r\n    return fallbackResults;\r\n    \r\n  } catch (error) {\r\n    console.error('Search failed completely, using fallback:', error);\r\n    return FALLBACK_POSTAL_CODES.filter((item: AddressSuggestion) => \r\n      item.postalCode.startsWith(query) || \r\n      item.city.toLowerCase().includes(query.toLowerCase())\r\n    ).slice(0, 5);\r\n  }\r\n};\r\n\r\nexport const getCityByPostalCode = async (postalCode: string): Promise<string | null> => {\r\n  try {\r\n    const results = await searchGermanAddresses(postalCode, 'postal');\r\n    if (results.length > 0) {\r\n      return results[0].city;\r\n    }\r\n    \r\n    // Fallback\r\n    const fallback = FALLBACK_POSTAL_CODES.find((item: AddressSuggestion) => item.postalCode === postalCode);\r\n    return fallback ? fallback.city : null;\r\n  } catch (error) {\r\n    const fallback = FALLBACK_POSTAL_CODES.find((item: AddressSuggestion) => item.postalCode === postalCode);\r\n    return fallback ? fallback.city : null;\r\n  }\r\n};\r\n\r\nexport const getPostalCodeByCity = async (city: string): Promise<string | null> => {\r\n  try {\r\n    const results = await searchGermanAddresses(city, 'city');\r\n    if (results.length > 0) {\r\n      return results[0].postalCode;\r\n    }\r\n    \r\n    // Fallback\r\n    const fallback = FALLBACK_POSTAL_CODES.find((item: AddressSuggestion) => \r\n      item.city.toLowerCase() === city.toLowerCase()\r\n    );\r\n    return fallback ? fallback.postalCode : null;\r\n  } catch (error) {\r\n    const fallback = FALLBACK_POSTAL_CODES.find((item: AddressSuggestion) => \r\n      item.city.toLowerCase() === city.toLowerCase()\r\n    );\r\n    return fallback ? fallback.postalCode : null;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}