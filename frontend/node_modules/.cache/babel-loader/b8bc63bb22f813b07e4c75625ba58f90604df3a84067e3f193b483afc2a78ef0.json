{"ast":null,"code":"// Enhanced address service with comprehensive German postal code coverage\n\n// Primary API: OpenPLZ (German postal code specialist)\nconst OPENPLZ_BASE = 'https://openplzapi.org/de';\n\n// Secondary API: Nominatim (fallback)\nconst NOMINATIM_BASE = 'https://nominatim.openstreetmap.org/search';\nexport const searchGermanAddresses = async (query, type = 'city') => {\n  if (!query || query.length < 2) return [];\n\n  // Try OpenPLZ API first (better for German addresses)\n  try {\n    let openplzUrl = '';\n    if (type === 'postal') {\n      // Search by postal code\n      openplzUrl = `${OPENPLZ_BASE}/Localities?postalCode=${query}&page=1&pageSize=10`;\n    } else {\n      // Search by city name  \n      openplzUrl = `${OPENPLZ_BASE}/Localities?name=${encodeURIComponent(query)}&page=1&pageSize=10`;\n    }\n    console.log(`Searching OpenPLZ for \"${query}\" (${type}):`, openplzUrl);\n    const response = await fetch(openplzUrl);\n    const data = await response.json();\n    if (data && Array.isArray(data)) {\n      const results = data.map(item => {\n        var _item$federalState, _item$federalState2;\n        return {\n          postalCode: item.postalCode,\n          city: item.name,\n          state: ((_item$federalState = item.federalState) === null || _item$federalState === void 0 ? void 0 : _item$federalState.name) || 'Germany',\n          displayName: `${item.postalCode} - ${item.name}, ${((_item$federalState2 = item.federalState) === null || _item$federalState2 === void 0 ? void 0 : _item$federalState2.name) || 'Germany'}`\n        };\n      });\n      console.log(`OpenPLZ returned ${results.length} results for \"${query}\"`);\n      return results;\n    }\n  } catch (error) {\n    console.log('OpenPLZ API failed, trying Nominatim fallback:', error);\n  }\n\n  // Fallback to Nominatim\n  try {\n    let searchQuery = `${query}, Germany`;\n    const response = await fetch(`${NOMINATIM_BASE}?` + new URLSearchParams({\n      q: searchQuery,\n      format: 'json',\n      countrycodes: 'de',\n      limit: '10',\n      addressdetails: '1'\n    }));\n    const data = await response.json();\n    const results = data.filter(item => {\n      var _item$address, _item$address2;\n      return ((_item$address = item.address) === null || _item$address === void 0 ? void 0 : _item$address.postcode) && ((_item$address2 = item.address) === null || _item$address2 === void 0 ? void 0 : _item$address2.city);\n    }).map(item => ({\n      postalCode: item.address.postcode,\n      city: item.address.city || item.address.town || item.address.village,\n      state: item.address.state,\n      displayName: `${item.address.postcode} - ${item.address.city || item.address.town}`\n    })).filter((item, index, self) => index === self.findIndex(t => t.postalCode === item.postalCode && t.city === item.city));\n    console.log(`Nominatim returned ${results.length} results for \"${query}\"`);\n    return results;\n  } catch (error) {\n    console.error('Both APIs failed:', error);\n    return [];\n  }\n};\n\n// Enhanced fallback data with München and Nürnberg examples\nconst FALLBACK_POSTAL_CODES = [\n// München (multiple postal codes)\n{\n  postalCode: '80331',\n  city: 'München',\n  state: 'Bayern',\n  displayName: '80331 - München, Bayern'\n}, {\n  postalCode: '80333',\n  city: 'München',\n  state: 'Bayern',\n  displayName: '80333 - München, Bayern'\n}, {\n  postalCode: '80335',\n  city: 'München',\n  state: 'Bayern',\n  displayName: '80335 - München, Bayern'\n}, {\n  postalCode: '80337',\n  city: 'München',\n  state: 'Bayern',\n  displayName: '80337 - München, Bayern'\n}, {\n  postalCode: '80469',\n  city: 'München',\n  state: 'Bayern',\n  displayName: '80469 - München, Bayern'\n}, {\n  postalCode: '80636',\n  city: 'München',\n  state: 'Bayern',\n  displayName: '80636 - München, Bayern'\n}, {\n  postalCode: '80637',\n  city: 'München',\n  state: 'Bayern',\n  displayName: '80637 - München, Bayern'\n}, {\n  postalCode: '80638',\n  city: 'München',\n  state: 'Bayern',\n  displayName: '80638 - München, Bayern'\n}, {\n  postalCode: '81675',\n  city: 'München',\n  state: 'Bayern',\n  displayName: '81675 - München, Bayern'\n}, {\n  postalCode: '81677',\n  city: 'München',\n  state: 'Bayern',\n  displayName: '81677 - München, Bayern'\n},\n// Nürnberg (multiple postal codes)\n{\n  postalCode: '90402',\n  city: 'Nürnberg',\n  state: 'Bayern',\n  displayName: '90402 - Nürnberg, Bayern'\n}, {\n  postalCode: '90403',\n  city: 'Nürnberg',\n  state: 'Bayern',\n  displayName: '90403 - Nürnberg, Bayern'\n}, {\n  postalCode: '90408',\n  city: 'Nürnberg',\n  state: 'Bayern',\n  displayName: '90408 - Nürnberg, Bayern'\n}, {\n  postalCode: '90409',\n  city: 'Nürnberg',\n  state: 'Bayern',\n  displayName: '90409 - Nürnberg, Bayern'\n}, {\n  postalCode: '90411',\n  city: 'Nürnberg',\n  state: 'Bayern',\n  displayName: '90411 - Nürnberg, Bayern'\n}, {\n  postalCode: '90419',\n  city: 'Nürnberg',\n  state: 'Bayern',\n  displayName: '90419 - Nürnberg, Bayern'\n}, {\n  postalCode: '90425',\n  city: 'Nürnberg',\n  state: 'Bayern',\n  displayName: '90425 - Nürnberg, Bayern'\n}, {\n  postalCode: '90427',\n  city: 'Nürnberg',\n  state: 'Bayern',\n  displayName: '90427 - Nürnberg, Bayern'\n}, {\n  postalCode: '90429',\n  city: 'Nürnberg',\n  state: 'Bayern',\n  displayName: '90429 - Nürnberg, Bayern'\n}, {\n  postalCode: '90431',\n  city: 'Nürnberg',\n  state: 'Bayern',\n  displayName: '90431 - Nürnberg, Bayern'\n},\n// Other major cities\n{\n  postalCode: '10115',\n  city: 'Berlin',\n  state: 'Berlin',\n  displayName: '10115 - Berlin, Berlin'\n}, {\n  postalCode: '20095',\n  city: 'Hamburg',\n  state: 'Hamburg',\n  displayName: '20095 - Hamburg, Hamburg'\n}, {\n  postalCode: '50667',\n  city: 'Köln',\n  state: 'Nordrhein-Westfalen',\n  displayName: '50667 - Köln, NRW'\n}, {\n  postalCode: '60311',\n  city: 'Frankfurt am Main',\n  state: 'Hessen',\n  displayName: '60311 - Frankfurt am Main, Hessen'\n}, {\n  postalCode: '91054',\n  city: 'Erlangen',\n  state: 'Bayern',\n  displayName: '91054 - Erlangen, Bayern'\n}];\nexport const searchPostalCodes = async query => {\n  console.log(`Searching postal codes for: \"${query}\"`);\n  try {\n    if (query.length >= 2) {\n      const apiResults = await searchGermanAddresses(query, /^\\d/.test(query) ? 'postal' : 'city');\n      if (apiResults.length > 0) {\n        console.log(`API success: ${apiResults.length} results`);\n        return apiResults.slice(0, 8);\n      }\n    }\n\n    // Enhanced fallback search\n    const fallbackResults = FALLBACK_POSTAL_CODES.filter(item => item.postalCode.startsWith(query) || item.city.toLowerCase().includes(query.toLowerCase())).slice(0, 8);\n    console.log(`Using fallback: ${fallbackResults.length} results for \"${query}\"`);\n    return fallbackResults;\n  } catch (error) {\n    console.error('Search failed completely, using fallback:', error);\n    return FALLBACK_POSTAL_CODES.filter(item => item.postalCode.startsWith(query) || item.city.toLowerCase().includes(query.toLowerCase())).slice(0, 5);\n  }\n};\nexport const getCityByPostalCode = async postalCode => {\n  try {\n    const results = await searchGermanAddresses(postalCode, 'postal');\n    if (results.length > 0) {\n      return results[0].city;\n    }\n\n    // Fallback\n    const fallback = FALLBACK_POSTAL_CODES.find(item => item.postalCode === postalCode);\n    return fallback ? fallback.city : null;\n  } catch (error) {\n    const fallback = FALLBACK_POSTAL_CODES.find(item => item.postalCode === postalCode);\n    return fallback ? fallback.city : null;\n  }\n};\nexport const getPostalCodeByCity = async city => {\n  try {\n    const results = await searchGermanAddresses(city, 'city');\n    if (results.length > 0) {\n      return results[0].postalCode;\n    }\n\n    // Fallback\n    const fallback = FALLBACK_POSTAL_CODES.find(item => item.city.toLowerCase() === city.toLowerCase());\n    return fallback ? fallback.postalCode : null;\n  } catch (error) {\n    const fallback = FALLBACK_POSTAL_CODES.find(item => item.city.toLowerCase() === city.toLowerCase());\n    return fallback ? fallback.postalCode : null;\n  }\n};","map":{"version":3,"names":["OPENPLZ_BASE","NOMINATIM_BASE","searchGermanAddresses","query","type","length","openplzUrl","encodeURIComponent","console","log","response","fetch","data","json","Array","isArray","results","map","item","_item$federalState","_item$federalState2","postalCode","city","name","state","federalState","displayName","error","searchQuery","URLSearchParams","q","format","countrycodes","limit","addressdetails","filter","_item$address","_item$address2","address","postcode","town","village","index","self","findIndex","t","FALLBACK_POSTAL_CODES","searchPostalCodes","apiResults","test","slice","fallbackResults","startsWith","toLowerCase","includes","getCityByPostalCode","fallback","find","getPostalCodeByCity"],"sources":["C:/Users/sahoo/OneDrive/Desktop/internet-provider-comparison/backend/Check24-Gendev-Challenge-2025/frontend/src/services/addressService.ts"],"sourcesContent":["// Enhanced address service with comprehensive German postal code coverage\r\nexport interface AddressSuggestion {\r\n  postalCode: string;\r\n  city: string;\r\n  state: string;\r\n  displayName: string;\r\n}\r\n\r\n// Primary API: OpenPLZ (German postal code specialist)\r\nconst OPENPLZ_BASE = 'https://openplzapi.org/de';\r\n\r\n// Secondary API: Nominatim (fallback)\r\nconst NOMINATIM_BASE = 'https://nominatim.openstreetmap.org/search';\r\n\r\nexport const searchGermanAddresses = async (query: string, type: 'city' | 'postal' = 'city'): Promise<AddressSuggestion[]> => {\r\n  if (!query || query.length < 2) return [];\r\n  \r\n  // Try OpenPLZ API first (better for German addresses)\r\n  try {\r\n    let openplzUrl = '';\r\n    \r\n    if (type === 'postal') {\r\n      // Search by postal code\r\n      openplzUrl = `${OPENPLZ_BASE}/Localities?postalCode=${query}&page=1&pageSize=10`;\r\n    } else {\r\n      // Search by city name  \r\n      openplzUrl = `${OPENPLZ_BASE}/Localities?name=${encodeURIComponent(query)}&page=1&pageSize=10`;\r\n    }\r\n    \r\n    console.log(`Searching OpenPLZ for \"${query}\" (${type}):`, openplzUrl);\r\n    \r\n    const response = await fetch(openplzUrl);\r\n    const data = await response.json();\r\n    \r\n    if (data && Array.isArray(data)) {\r\n      const results = data.map((item: any) => ({\r\n        postalCode: item.postalCode,\r\n        city: item.name,\r\n        state: item.federalState?.name || 'Germany',\r\n        displayName: `${item.postalCode} - ${item.name}, ${item.federalState?.name || 'Germany'}`\r\n      }));\r\n      \r\n      console.log(`OpenPLZ returned ${results.length} results for \"${query}\"`);\r\n      return results;\r\n    }\r\n  } catch (error) {\r\n    console.log('OpenPLZ API failed, trying Nominatim fallback:', error);\r\n  }\r\n\r\n  // Fallback to Nominatim\r\n  try {\r\n    let searchQuery = `${query}, Germany`;\r\n    \r\n    const response = await fetch(\r\n      `${NOMINATIM_BASE}?` + new URLSearchParams({\r\n        q: searchQuery,\r\n        format: 'json',\r\n        countrycodes: 'de',\r\n        limit: '10',\r\n        addressdetails: '1'\r\n      })\r\n    );\r\n    \r\n    const data = await response.json();\r\n    \r\n    const results = data\r\n      .filter((item: any) => item.address?.postcode && item.address?.city)\r\n      .map((item: any) => ({\r\n        postalCode: item.address.postcode,\r\n        city: item.address.city || item.address.town || item.address.village,\r\n        state: item.address.state,\r\n        displayName: `${item.address.postcode} - ${item.address.city || item.address.town}`\r\n      }))\r\n      .filter((item: AddressSuggestion, index: number, self: AddressSuggestion[]) => \r\n        index === self.findIndex((t: AddressSuggestion) => t.postalCode === item.postalCode && t.city === item.city)\r\n      );\r\n    \r\n    console.log(`Nominatim returned ${results.length} results for \"${query}\"`);\r\n    return results;\r\n    \r\n  } catch (error) {\r\n    console.error('Both APIs failed:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Enhanced fallback data with München and Nürnberg examples\r\nconst FALLBACK_POSTAL_CODES: AddressSuggestion[] = [\r\n  // München (multiple postal codes)\r\n  { postalCode: '80331', city: 'München', state: 'Bayern', displayName: '80331 - München, Bayern' },\r\n  { postalCode: '80333', city: 'München', state: 'Bayern', displayName: '80333 - München, Bayern' },\r\n  { postalCode: '80335', city: 'München', state: 'Bayern', displayName: '80335 - München, Bayern' },\r\n  { postalCode: '80337', city: 'München', state: 'Bayern', displayName: '80337 - München, Bayern' },\r\n  { postalCode: '80469', city: 'München', state: 'Bayern', displayName: '80469 - München, Bayern' },\r\n  { postalCode: '80636', city: 'München', state: 'Bayern', displayName: '80636 - München, Bayern' },\r\n  { postalCode: '80637', city: 'München', state: 'Bayern', displayName: '80637 - München, Bayern' },\r\n  { postalCode: '80638', city: 'München', state: 'Bayern', displayName: '80638 - München, Bayern' },\r\n  { postalCode: '81675', city: 'München', state: 'Bayern', displayName: '81675 - München, Bayern' },\r\n  { postalCode: '81677', city: 'München', state: 'Bayern', displayName: '81677 - München, Bayern' },\r\n  \r\n  // Nürnberg (multiple postal codes)\r\n  { postalCode: '90402', city: 'Nürnberg', state: 'Bayern', displayName: '90402 - Nürnberg, Bayern' },\r\n  { postalCode: '90403', city: 'Nürnberg', state: 'Bayern', displayName: '90403 - Nürnberg, Bayern' },\r\n  { postalCode: '90408', city: 'Nürnberg', state: 'Bayern', displayName: '90408 - Nürnberg, Bayern' },\r\n  { postalCode: '90409', city: 'Nürnberg', state: 'Bayern', displayName: '90409 - Nürnberg, Bayern' },\r\n  { postalCode: '90411', city: 'Nürnberg', state: 'Bayern', displayName: '90411 - Nürnberg, Bayern' },\r\n  { postalCode: '90419', city: 'Nürnberg', state: 'Bayern', displayName: '90419 - Nürnberg, Bayern' },\r\n  { postalCode: '90425', city: 'Nürnberg', state: 'Bayern', displayName: '90425 - Nürnberg, Bayern' },\r\n  { postalCode: '90427', city: 'Nürnberg', state: 'Bayern', displayName: '90427 - Nürnberg, Bayern' },\r\n  { postalCode: '90429', city: 'Nürnberg', state: 'Bayern', displayName: '90429 - Nürnberg, Bayern' },\r\n  { postalCode: '90431', city: 'Nürnberg', state: 'Bayern', displayName: '90431 - Nürnberg, Bayern' },\r\n  \r\n  // Other major cities\r\n  { postalCode: '10115', city: 'Berlin', state: 'Berlin', displayName: '10115 - Berlin, Berlin' },\r\n  { postalCode: '20095', city: 'Hamburg', state: 'Hamburg', displayName: '20095 - Hamburg, Hamburg' },\r\n  { postalCode: '50667', city: 'Köln', state: 'Nordrhein-Westfalen', displayName: '50667 - Köln, NRW' },\r\n  { postalCode: '60311', city: 'Frankfurt am Main', state: 'Hessen', displayName: '60311 - Frankfurt am Main, Hessen' },\r\n  { postalCode: '91054', city: 'Erlangen', state: 'Bayern', displayName: '91054 - Erlangen, Bayern' }\r\n];\r\n\r\nexport const searchPostalCodes = async (query: string): Promise<AddressSuggestion[]> => {\r\n  console.log(`Searching postal codes for: \"${query}\"`);\r\n  \r\n  try {\r\n    if (query.length >= 2) {\r\n      const apiResults = await searchGermanAddresses(query, /^\\d/.test(query) ? 'postal' : 'city');\r\n      if (apiResults.length > 0) {\r\n        console.log(`API success: ${apiResults.length} results`);\r\n        return apiResults.slice(0, 8);\r\n      }\r\n    }\r\n    \r\n    // Enhanced fallback search\r\n    const fallbackResults = FALLBACK_POSTAL_CODES.filter((item: AddressSuggestion) => \r\n      item.postalCode.startsWith(query) || \r\n      item.city.toLowerCase().includes(query.toLowerCase())\r\n    ).slice(0, 8);\r\n    \r\n    console.log(`Using fallback: ${fallbackResults.length} results for \"${query}\"`);\r\n    return fallbackResults;\r\n    \r\n  } catch (error) {\r\n    console.error('Search failed completely, using fallback:', error);\r\n    return FALLBACK_POSTAL_CODES.filter((item: AddressSuggestion) => \r\n      item.postalCode.startsWith(query) || \r\n      item.city.toLowerCase().includes(query.toLowerCase())\r\n    ).slice(0, 5);\r\n  }\r\n};\r\n\r\nexport const getCityByPostalCode = async (postalCode: string): Promise<string | null> => {\r\n  try {\r\n    const results = await searchGermanAddresses(postalCode, 'postal');\r\n    if (results.length > 0) {\r\n      return results[0].city;\r\n    }\r\n    \r\n    // Fallback\r\n    const fallback = FALLBACK_POSTAL_CODES.find((item: AddressSuggestion) => item.postalCode === postalCode);\r\n    return fallback ? fallback.city : null;\r\n  } catch (error) {\r\n    const fallback = FALLBACK_POSTAL_CODES.find((item: AddressSuggestion) => item.postalCode === postalCode);\r\n    return fallback ? fallback.city : null;\r\n  }\r\n};\r\n\r\nexport const getPostalCodeByCity = async (city: string): Promise<string | null> => {\r\n  try {\r\n    const results = await searchGermanAddresses(city, 'city');\r\n    if (results.length > 0) {\r\n      return results[0].postalCode;\r\n    }\r\n    \r\n    // Fallback\r\n    const fallback = FALLBACK_POSTAL_CODES.find((item: AddressSuggestion) => \r\n      item.city.toLowerCase() === city.toLowerCase()\r\n    );\r\n    return fallback ? fallback.postalCode : null;\r\n  } catch (error) {\r\n    const fallback = FALLBACK_POSTAL_CODES.find((item: AddressSuggestion) => \r\n      item.city.toLowerCase() === city.toLowerCase()\r\n    );\r\n    return fallback ? fallback.postalCode : null;\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}