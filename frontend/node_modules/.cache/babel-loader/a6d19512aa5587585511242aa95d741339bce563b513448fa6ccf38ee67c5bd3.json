{"ast":null,"code":"// German postal code data service\n\n// Sample German postal codes (in real app, this would be from API)\nconst GERMAN_POSTAL_CODES = [{\n  postalCode: '10115',\n  city: 'Berlin',\n  state: 'Berlin'\n}, {\n  postalCode: '20095',\n  city: 'Hamburg',\n  state: 'Hamburg'\n}, {\n  postalCode: '80331',\n  city: 'München',\n  state: 'Bayern'\n}, {\n  postalCode: '50667',\n  city: 'Köln',\n  state: 'Nordrhein-Westfalen'\n}, {\n  postalCode: '60311',\n  city: 'Frankfurt am Main',\n  state: 'Hessen'\n}, {\n  postalCode: '70173',\n  city: 'Stuttgart',\n  state: 'Baden-Württemberg'\n}, {\n  postalCode: '30159',\n  city: 'Hannover',\n  state: 'Niedersachsen'\n}, {\n  postalCode: '90402',\n  city: 'Nürnberg',\n  state: 'Bayern'\n}, {\n  postalCode: '01067',\n  city: 'Dresden',\n  state: 'Sachsen'\n}, {\n  postalCode: '04109',\n  city: 'Leipzig',\n  state: 'Sachsen'\n}, {\n  postalCode: '45127',\n  city: 'Essen',\n  state: 'Nordrhein-Westfalen'\n}, {\n  postalCode: '44135',\n  city: 'Dortmund',\n  state: 'Nordrhein-Westfalen'\n}, {\n  postalCode: '28195',\n  city: 'Bremen',\n  state: 'Bremen'\n}, {\n  postalCode: '24103',\n  city: 'Kiel',\n  state: 'Schleswig-Holstein'\n}, {\n  postalCode: '99084',\n  city: 'Erfurt',\n  state: 'Thüringen'\n}, {\n  postalCode: '55116',\n  city: 'Mainz',\n  state: 'Rheinland-Pfalz'\n}, {\n  postalCode: '66111',\n  city: 'Saarbrücken',\n  state: 'Saarland'\n}, {\n  postalCode: '39104',\n  city: 'Magdeburg',\n  state: 'Sachsen-Anhalt'\n}, {\n  postalCode: '17489',\n  city: 'Greifswald',\n  state: 'Mecklenburg-Vorpommern'\n}, {\n  postalCode: '12047',\n  city: 'Berlin',\n  state: 'Berlin'\n}, {\n  postalCode: '22765',\n  city: 'Hamburg',\n  state: 'Hamburg'\n}, {\n  postalCode: '81675',\n  city: 'München',\n  state: 'Bayern'\n}, {\n  postalCode: '91054',\n  city: 'Erlangen',\n  state: 'Bayern'\n}, {\n  postalCode: '91052',\n  city: 'Erlangen',\n  state: 'Bayern'\n}];\nexport const searchPostalCodes = query => {\n  if (!query || query.length < 2) return [];\n  return GERMAN_POSTAL_CODES.filter(item => item.postalCode.startsWith(query) || item.city.toLowerCase().includes(query.toLowerCase())).slice(0, 5); // Limit to 5 suggestions\n};\nexport const getCityByPostalCode = postalCode => {\n  const match = GERMAN_POSTAL_CODES.find(item => item.postalCode === postalCode);\n  return match ? match.city : null;\n};\nexport const getPostalCodeByCity = city => {\n  const match = GERMAN_POSTAL_CODES.find(item => item.city.toLowerCase() === city.toLowerCase());\n  return match ? match.postalCode : null;\n};","map":{"version":3,"names":["GERMAN_POSTAL_CODES","postalCode","city","state","searchPostalCodes","query","length","filter","item","startsWith","toLowerCase","includes","slice","getCityByPostalCode","match","find","getPostalCodeByCity"],"sources":["C:/Users/sahoo/OneDrive/Desktop/internet-provider-comparison/backend/Check24-Gendev-Challenge-2025/frontend/src/services/addressService.ts"],"sourcesContent":["// German postal code data service\r\ninterface AddressSuggestion {\r\n  postalCode: string;\r\n  city: string;\r\n  state: string;\r\n}\r\n\r\n// Sample German postal codes (in real app, this would be from API)\r\nconst GERMAN_POSTAL_CODES: AddressSuggestion[] = [\r\n  { postalCode: '10115', city: 'Berlin', state: 'Berlin' },\r\n  { postalCode: '20095', city: 'Hamburg', state: 'Hamburg' },\r\n  { postalCode: '80331', city: 'München', state: 'Bayern' },\r\n  { postalCode: '50667', city: 'Köln', state: 'Nordrhein-Westfalen' },\r\n  { postalCode: '60311', city: 'Frankfurt am Main', state: 'Hessen' },\r\n  { postalCode: '70173', city: 'Stuttgart', state: 'Baden-Württemberg' },\r\n  { postalCode: '30159', city: 'Hannover', state: 'Niedersachsen' },\r\n  { postalCode: '90402', city: 'Nürnberg', state: 'Bayern' },\r\n  { postalCode: '01067', city: 'Dresden', state: 'Sachsen' },\r\n  { postalCode: '04109', city: 'Leipzig', state: 'Sachsen' },\r\n  { postalCode: '45127', city: 'Essen', state: 'Nordrhein-Westfalen' },\r\n  { postalCode: '44135', city: 'Dortmund', state: 'Nordrhein-Westfalen' },\r\n  { postalCode: '28195', city: 'Bremen', state: 'Bremen' },\r\n  { postalCode: '24103', city: 'Kiel', state: 'Schleswig-Holstein' },\r\n  { postalCode: '99084', city: 'Erfurt', state: 'Thüringen' },\r\n  { postalCode: '55116', city: 'Mainz', state: 'Rheinland-Pfalz' },\r\n  { postalCode: '66111', city: 'Saarbrücken', state: 'Saarland' },\r\n  { postalCode: '39104', city: 'Magdeburg', state: 'Sachsen-Anhalt' },\r\n  { postalCode: '17489', city: 'Greifswald', state: 'Mecklenburg-Vorpommern' },\r\n  { postalCode: '12047', city: 'Berlin', state: 'Berlin' },\r\n  { postalCode: '22765', city: 'Hamburg', state: 'Hamburg' },\r\n  { postalCode: '81675', city: 'München', state: 'Bayern' },\r\n  { postalCode: '91054', city: 'Erlangen', state: 'Bayern' },\r\n  { postalCode: '91052', city: 'Erlangen', state: 'Bayern' }\r\n];\r\n\r\nexport const searchPostalCodes = (query: string): AddressSuggestion[] => {\r\n  if (!query || query.length < 2) return [];\r\n  \r\n  return GERMAN_POSTAL_CODES.filter(item => \r\n    item.postalCode.startsWith(query) || \r\n    item.city.toLowerCase().includes(query.toLowerCase())\r\n  ).slice(0, 5); // Limit to 5 suggestions\r\n};\r\n\r\nexport const getCityByPostalCode = (postalCode: string): string | null => {\r\n  const match = GERMAN_POSTAL_CODES.find(item => item.postalCode === postalCode);\r\n  return match ? match.city : null;\r\n};\r\n\r\nexport const getPostalCodeByCity = (city: string): string | null => {\r\n  const match = GERMAN_POSTAL_CODES.find(item => \r\n    item.city.toLowerCase() === city.toLowerCase()\r\n  );\r\n  return match ? match.postalCode : null;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}